package de.hsudbrock.arcview_wot_bridge

import ai.ancf.lmos.wot.Wot
import com.expediagroup.graphql.generator.annotations.GraphQLDescription
import com.expediagroup.graphql.server.operations.Subscription
import org.springframework.stereotype.Component
import org.springframework.web.reactive.function.client.WebClient
import reactor.core.publisher.Flux

@Component
class AgentSubscription(webClientBuilder: WebClient.Builder, wot: Wot): Subscription {

    private var webClient: WebClient = webClientBuilder.baseUrl("http://localhost:8081/lmos/runtime/apis/v1").build()

    @GraphQLDescription("Executes an Agent and returns the results. If no agent is specified, the first agent is used.")
    fun agent(agentName: String? = null, request: AgentRequest) : Flux<AgentResult> {

        val tenantId = request.systemContext.first { it.key == "tenantId" }.value
        val conversationId = request.conversationContext.conversationId

        val result = webClient.post()
            .uri("/{tenantId}/chat/{conversationId}/message", tenantId, conversationId)
            .header("x-turn-id", request.conversationContext.turnId ?: "unknown turn")
            .bodyValue(
                Conversation(
                    inputContext = InputContext(
                        messages = request.messages,
                        anonymizationEntities = request.conversationContext.anonymizationEntities
                    ),
                    systemContext = SystemContext(
                        channelId = "channelId",
                        contextParams = mapOf()
                    ),
                    userContext = request.userContext
                )
            )
            .retrieve()
            .bodyToMono(AssistantMessage::class.java)

        val resultFlux = result.map { assistantMessage ->
            AgentResult(
                status = "all good",
                responseTime = 2.0,
                messages = listOf(
                    Message(
                        role = "assistant",
                        content = assistantMessage.content,
                        turnId = request.conversationContext.turnId
                    )
                ),
                anonymizationEntities = listOf()
            )
        }.flux()

        return resultFlux
    }
}

data class AgentRequest(
    val messages: List<Message>,
    val conversationContext: ConversationContext,
    val systemContext: List<SystemContextEntry>,
    val userContext: UserContext,
)

data class Message(
    val role: String,
    val content: String,
    val format: String = "text",
    val turnId: String? = null,
)

data class ConversationContext(
    val conversationId: String,
    val turnId: String? = null,
    val anonymizationEntities: List<AnonymizationEntity>? = null,
)

data class UserContext(
    val userId: String? = null,
    val userToken: String? = null,
    val profile: List<ProfileEntry>,
)

data class ProfileEntry(
    val key: String,
    val value: String,
)

data class AnonymizationEntity(val type: String, val value: String, val replacement: String)

data class SystemContextEntry(
    val key: String,
    val value: String,
)

data class AgentResult(
    val status: String? = null,
    val responseTime: Double = -1.0,
    val messages: List<Message>,
    val anonymizationEntities: List<AnonymizationEntity>? = null,
)

data class Conversation(
    val inputContext: InputContext,
    val systemContext: SystemContext,
    val userContext: UserContext,
)

data class InputContext(
    val messages: List<Message>,
    val anonymizationEntities: List<AnonymizationEntity>? = null,
)

data class SystemContext(
    val channelId: String,
    val contextParams: Map<String, String> = mapOf(),
)


sealed class ChatMessage {
    abstract val content: String
}

data class AssistantMessage(
    override val content: String,
    val anonymizationEntities: List<AnonymizationEntity>? = emptyList(),
) : ChatMessage()